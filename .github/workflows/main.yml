
name: CD

on:
  push:
    branches: [ master ]

jobs:
  fetch_releases:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - uses: Gr1N/setup-poetry@v2
    - run: poetry install
    - id: set-matrix
      run: |
        OUTPUT=$(poetry run python fetch_releases.py --owner python-poetry --name poetry --last_n 5 --token ${{ secrets.TOKEN }})
        echo "::set-output name=matrix::$OUTPUT"
  build-all-images:
    needs: fetch_releases
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.fetch_releases.outputs.matrix)}}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: create Dockerfile from template
      run: |
        envsubst < Dockerfile.template > Dockerfile
        if [[ "$PYTHON_VERSION" == 3.8 && "$POETRY_VERSION" == 1.0.10 ]]; then
            echo ::set-env name=TAG::${{matrix.PYTHON_VERSION}}-${{matrix.POETRY_VERSION}},latest
        else
            echo ::set-env name=TAG::${{matrix.PYTHON_VERSION}}-${{matrix.POETRY_VERSION}}
        fi
      env:
        PYTHON_VERSION: ${{ matrix.PYTHON_VERSION }}
        POETRY_VERSION: ${{ matrix.POETRY_VERSION }}
    - name: Build and push Docker images
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: tolgaeren/poetry-in-a-container
        tags: ${{ env.TAG }}
  